// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: genom.proto

#ifndef PROTOBUF_genom_2eproto__INCLUDED
#define PROTOBUF_genom_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace GenomEvaluation {
class Generation;
class GenerationDefaultTypeInternal;
extern GenerationDefaultTypeInternal _Generation_default_instance_;
class Genom;
class GenomDefaultTypeInternal;
extern GenomDefaultTypeInternal _Genom_default_instance_;
class Individual;
class IndividualDefaultTypeInternal;
extern IndividualDefaultTypeInternal _Individual_default_instance_;
}  // namespace GenomEvaluation

namespace GenomEvaluation {

namespace protobuf_genom_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_genom_2eproto

// ===================================================================

class Genom : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GenomEvaluation.Genom) */ {
 public:
  Genom();
  virtual ~Genom();

  Genom(const Genom& from);

  inline Genom& operator=(const Genom& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Genom(Genom&& from) noexcept
    : Genom() {
    *this = ::std::move(from);
  }

  inline Genom& operator=(Genom&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Genom& default_instance();

  static inline const Genom* internal_default_instance() {
    return reinterpret_cast<const Genom*>(
               &_Genom_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Genom* other);
  friend void swap(Genom& a, Genom& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Genom* New() const PROTOBUF_FINAL { return New(NULL); }

  Genom* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Genom& from);
  void MergeFrom(const Genom& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Genom* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float gene = 1 [packed = true];
  int gene_size() const;
  void clear_gene();
  static const int kGeneFieldNumber = 1;
  float gene(int index) const;
  void set_gene(int index, float value);
  void add_gene(float value);
  const ::google::protobuf::RepeatedField< float >&
      gene() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_gene();

  // @@protoc_insertion_point(class_scope:GenomEvaluation.Genom)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > gene_;
  mutable int _gene_cached_byte_size_;
  mutable int _cached_size_;
  friend struct protobuf_genom_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Individual : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GenomEvaluation.Individual) */ {
 public:
  Individual();
  virtual ~Individual();

  Individual(const Individual& from);

  inline Individual& operator=(const Individual& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Individual(Individual&& from) noexcept
    : Individual() {
    *this = ::std::move(from);
  }

  inline Individual& operator=(Individual&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Individual& default_instance();

  static inline const Individual* internal_default_instance() {
    return reinterpret_cast<const Individual*>(
               &_Individual_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Individual* other);
  friend void swap(Individual& a, Individual& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Individual* New() const PROTOBUF_FINAL { return New(NULL); }

  Individual* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Individual& from);
  void MergeFrom(const Individual& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Individual* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .GenomEvaluation.Genom genom = 1;
  bool has_genom() const;
  void clear_genom();
  static const int kGenomFieldNumber = 1;
  const ::GenomEvaluation::Genom& genom() const;
  ::GenomEvaluation::Genom* mutable_genom();
  ::GenomEvaluation::Genom* release_genom();
  void set_allocated_genom(::GenomEvaluation::Genom* genom);

  // float evaluation = 2;
  void clear_evaluation();
  static const int kEvaluationFieldNumber = 2;
  float evaluation() const;
  void set_evaluation(float value);

  // @@protoc_insertion_point(class_scope:GenomEvaluation.Individual)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::GenomEvaluation::Genom* genom_;
  float evaluation_;
  mutable int _cached_size_;
  friend struct protobuf_genom_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Generation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GenomEvaluation.Generation) */ {
 public:
  Generation();
  virtual ~Generation();

  Generation(const Generation& from);

  inline Generation& operator=(const Generation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Generation(Generation&& from) noexcept
    : Generation() {
    *this = ::std::move(from);
  }

  inline Generation& operator=(Generation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Generation& default_instance();

  static inline const Generation* internal_default_instance() {
    return reinterpret_cast<const Generation*>(
               &_Generation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Generation* other);
  friend void swap(Generation& a, Generation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Generation* New() const PROTOBUF_FINAL { return New(NULL); }

  Generation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Generation& from);
  void MergeFrom(const Generation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Generation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .GenomEvaluation.Individual individuals = 1;
  int individuals_size() const;
  void clear_individuals();
  static const int kIndividualsFieldNumber = 1;
  const ::GenomEvaluation::Individual& individuals(int index) const;
  ::GenomEvaluation::Individual* mutable_individuals(int index);
  ::GenomEvaluation::Individual* add_individuals();
  ::google::protobuf::RepeatedPtrField< ::GenomEvaluation::Individual >*
      mutable_individuals();
  const ::google::protobuf::RepeatedPtrField< ::GenomEvaluation::Individual >&
      individuals() const;

  // @@protoc_insertion_point(class_scope:GenomEvaluation.Generation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::GenomEvaluation::Individual > individuals_;
  mutable int _cached_size_;
  friend struct protobuf_genom_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Genom

// repeated float gene = 1 [packed = true];
inline int Genom::gene_size() const {
  return gene_.size();
}
inline void Genom::clear_gene() {
  gene_.Clear();
}
inline float Genom::gene(int index) const {
  // @@protoc_insertion_point(field_get:GenomEvaluation.Genom.gene)
  return gene_.Get(index);
}
inline void Genom::set_gene(int index, float value) {
  gene_.Set(index, value);
  // @@protoc_insertion_point(field_set:GenomEvaluation.Genom.gene)
}
inline void Genom::add_gene(float value) {
  gene_.Add(value);
  // @@protoc_insertion_point(field_add:GenomEvaluation.Genom.gene)
}
inline const ::google::protobuf::RepeatedField< float >&
Genom::gene() const {
  // @@protoc_insertion_point(field_list:GenomEvaluation.Genom.gene)
  return gene_;
}
inline ::google::protobuf::RepeatedField< float >*
Genom::mutable_gene() {
  // @@protoc_insertion_point(field_mutable_list:GenomEvaluation.Genom.gene)
  return &gene_;
}

// -------------------------------------------------------------------

// Individual

// .GenomEvaluation.Genom genom = 1;
inline bool Individual::has_genom() const {
  return this != internal_default_instance() && genom_ != NULL;
}
inline void Individual::clear_genom() {
  if (GetArenaNoVirtual() == NULL && genom_ != NULL) delete genom_;
  genom_ = NULL;
}
inline const ::GenomEvaluation::Genom& Individual::genom() const {
  const ::GenomEvaluation::Genom* p = genom_;
  // @@protoc_insertion_point(field_get:GenomEvaluation.Individual.genom)
  return p != NULL ? *p : *reinterpret_cast<const ::GenomEvaluation::Genom*>(
      &::GenomEvaluation::_Genom_default_instance_);
}
inline ::GenomEvaluation::Genom* Individual::mutable_genom() {
  
  if (genom_ == NULL) {
    genom_ = new ::GenomEvaluation::Genom;
  }
  // @@protoc_insertion_point(field_mutable:GenomEvaluation.Individual.genom)
  return genom_;
}
inline ::GenomEvaluation::Genom* Individual::release_genom() {
  // @@protoc_insertion_point(field_release:GenomEvaluation.Individual.genom)
  
  ::GenomEvaluation::Genom* temp = genom_;
  genom_ = NULL;
  return temp;
}
inline void Individual::set_allocated_genom(::GenomEvaluation::Genom* genom) {
  delete genom_;
  genom_ = genom;
  if (genom) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GenomEvaluation.Individual.genom)
}

// float evaluation = 2;
inline void Individual::clear_evaluation() {
  evaluation_ = 0;
}
inline float Individual::evaluation() const {
  // @@protoc_insertion_point(field_get:GenomEvaluation.Individual.evaluation)
  return evaluation_;
}
inline void Individual::set_evaluation(float value) {
  
  evaluation_ = value;
  // @@protoc_insertion_point(field_set:GenomEvaluation.Individual.evaluation)
}

// -------------------------------------------------------------------

// Generation

// repeated .GenomEvaluation.Individual individuals = 1;
inline int Generation::individuals_size() const {
  return individuals_.size();
}
inline void Generation::clear_individuals() {
  individuals_.Clear();
}
inline const ::GenomEvaluation::Individual& Generation::individuals(int index) const {
  // @@protoc_insertion_point(field_get:GenomEvaluation.Generation.individuals)
  return individuals_.Get(index);
}
inline ::GenomEvaluation::Individual* Generation::mutable_individuals(int index) {
  // @@protoc_insertion_point(field_mutable:GenomEvaluation.Generation.individuals)
  return individuals_.Mutable(index);
}
inline ::GenomEvaluation::Individual* Generation::add_individuals() {
  // @@protoc_insertion_point(field_add:GenomEvaluation.Generation.individuals)
  return individuals_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::GenomEvaluation::Individual >*
Generation::mutable_individuals() {
  // @@protoc_insertion_point(field_mutable_list:GenomEvaluation.Generation.individuals)
  return &individuals_;
}
inline const ::google::protobuf::RepeatedPtrField< ::GenomEvaluation::Individual >&
Generation::individuals() const {
  // @@protoc_insertion_point(field_list:GenomEvaluation.Generation.individuals)
  return individuals_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace GenomEvaluation

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_genom_2eproto__INCLUDED
