// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: genom.proto

#include "genom.pb.h"
#include "genom.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace GenomEvaluation {

static const char* GenomEvaluation_method_names[] = {
  "/GenomEvaluation.GenomEvaluation/GetIndividual",
};

std::unique_ptr< GenomEvaluation::Stub> GenomEvaluation::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< GenomEvaluation::Stub> stub(new GenomEvaluation::Stub(channel));
  return stub;
}

GenomEvaluation::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetIndividual_(GenomEvaluation_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status GenomEvaluation::Stub::GetIndividual(::grpc::ClientContext* context, const ::GenomEvaluation::Genom& request, ::GenomEvaluation::Individual* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetIndividual_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::GenomEvaluation::Individual>* GenomEvaluation::Stub::AsyncGetIndividualRaw(::grpc::ClientContext* context, const ::GenomEvaluation::Genom& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::GenomEvaluation::Individual>::Create(channel_.get(), cq, rpcmethod_GetIndividual_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GenomEvaluation::Individual>* GenomEvaluation::Stub::PrepareAsyncGetIndividualRaw(::grpc::ClientContext* context, const ::GenomEvaluation::Genom& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::GenomEvaluation::Individual>::Create(channel_.get(), cq, rpcmethod_GetIndividual_, context, request, false);
}

GenomEvaluation::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GenomEvaluation_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GenomEvaluation::Service, ::GenomEvaluation::Genom, ::GenomEvaluation::Individual>(
          std::mem_fn(&GenomEvaluation::Service::GetIndividual), this)));
}

GenomEvaluation::Service::~Service() {
}

::grpc::Status GenomEvaluation::Service::GetIndividual(::grpc::ServerContext* context, const ::GenomEvaluation::Genom* request, ::GenomEvaluation::Individual* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace GenomEvaluation

